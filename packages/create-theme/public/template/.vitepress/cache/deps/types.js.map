{
  "version": 3,
  "sources": ["../../../../../../../node_modules/types/lib/types/hash.js", "../../../../../../../node_modules/types/lib/types/set.js", "../../../../../../../node_modules/types/lib/types/sorted_list.js", "../../../../../../../node_modules/types/lib/types.js", "../../../../../../../node_modules/types/index.js"],
  "sourcesContent": ["/**\n *  class Hash\n *\n *  Provides hashtable, where keys can be anything\n *\n *      var o1 = {},\n *          o2 = {},\n *          hash = new Hash();\n *\n *      hash.store(o1, 'abc');\n *      hash.store(o2, 'def');\n *\n *      hash.retrieve(o1); // -> 'abc'\n *      hash.retrieve(o2); // -> 'def'\n *      hash.retrieve({}); // -> undefined\n **/\n\n\n'use strict';\n\n\nfunction key_idx(self, key) {\n  return self.__hash_keys__.indexOf(key);\n}\n\n\n/**\n *  new Hash([defaultValue])\n *  - defaultValue (Mixed): value returned by [[Hash#get]] when key not found.\n *\n *  Creates new instance of Hash.\n *\n *      var h1 = new Hash(-1);\n *      h1.retrieve('test');\n *      // -> -1\n *\n *      var h2 = new Hash();\n *      h2.retrieve('test');\n *      // -> undefined\n **/\nvar Hash = module.exports = function Hash(defaultValue) {\n  this.__hash_index__     = 0;\n  this.__hash_keys__      = [];\n  this.__hash_vals__      = [];\n  this.__default_value__  = ('function' === typeof defaultValue) ?  defaultValue\n                          : function (/* h, k */) { return defaultValue; };\n  this.__count__          = 0;\n};\n\n\n/**\n *  Hash#store(key, val) -> Mixed\n *  - key (Mixed): Key. Can be any object (not only a string or number).\n *  - val (Mixed): Value.\n *\n *  Associate `key` with `val`, and return `val` back.\n *\n *  ##### Example\n *\n *      hash.store(123,           'abc');\n *      hash.store('string key',  'def');\n *      hash.store([1, 2, 3],     'ghi');\n *      hash.store({even: 'obj'}, 'jkl');\n *\n *  ##### Warning\n *\n *  Native JS Object allows only keys, so it stringifies any key you give to it,\n *  thus array `[1, 2, 3]` becomes `[1,2,3]` (string) when used as key, and\n *  any object becomes something like `[object Object]`.\n *\n *  Hash do not stringifies or anyhow modifies given object. That meanse that\n *  two instances of arrays (even with same values) are in fact different\n *  objects. See example:\n *\n *      var a1 = [1,2,3], a2 = [1,2,3];\n *\n *      hash.store(a1, 'A1');\n *      hash.store(a2, 'A2');\n *\n *      hash.retrieve(a1); // -> 'A1'\n *      hash.retrieve(a2); // -> 'A2'\n *\n *      // Similar to:\n *\n *      var o1 = {foo: 'bar'}, o2 = {foo: 'bar'};\n *\n *      hash.store(o1, 'O1');\n *      hash.store(o2, 'O2');\n *\n *      hash.retrieve(o1); // -> 'O1'\n *      hash.retrieve(o2); // -> 'O2'\n *\n **/\nHash.prototype.store = function store(key, val) {\n  var i = this.__hash_keys__.indexOf(key);\n\n  if (0 <= i) {\n    this.__hash_vals__[i] = val;\n    return;\n  }\n\n  i = this.__hash_index__;\n  this.__hash_index__ += 1;\n  this.__count__ += 1;\n\n  this.__hash_keys__[i] = key;\n  this.__hash_vals__[i] = val;\n\n  return val;\n};\n\n\n/** alias of: Hash#store\n *  Hash#set(key, val) -> Void\n **/\nHash.prototype.set = Hash.prototype.store;\n\n\n/**\n *  Hash#remove(key) -> Mixed\n *  - key (Mixed): Key to remove.\n *\n *  Removes given `key` and returns associated value.\n *\n *  ##### Example\n *\n *      var key = {};\n *\n *      hash.store(key, 'abc');\n *      hash.retrieve(key); // -> 'abc'\n *      hash.remove(key); // -> 'abc'\n *      hash.retrieve(key); // -> undefined\n **/\nHash.prototype.remove = function remove(key) {\n  var i = key_idx(this, key), val = this.__hash_vals__[i];\n\n  if (0 <= i) {\n    delete this.__hash_keys__[i];\n    delete this.__hash_vals__[i];\n    this.__count__ -= 1;\n  }\n\n  return val;\n};\n\n\n/**\n *  Hash#hasKey(key) -> Boolean\n *  - key (Mixed): Key of check.\n *\n *  Returns boolean `TRUE` whenever `key` present in the hash.\n *\n *  ##### Example\n *\n *      var k1 = {}, k2 = {};\n *\n *      hash.store(key, 'abc');\n *      hash.hasKey(k1); // -> true\n *      hash.hasKey(k2); // -> false\n **/\nHash.prototype.hasKey = function hasKey(key) {\n  return 0 <= key_idx(this, key);\n};\n\n\n/**\n *  Hash#retrieve(key) -> Mixed\n *  - key (Mixed): Key of the value to retrieve.\n *\n *  Returns value associated with `key`.\n *\n *  ##### Example\n *\n *      var k1 = {}, k2 = {};\n *\n *      hash.store(key, 'abc');\n *      hash.retrieve(k1); // -> 'abc'\n *      hash.retrieve(k2); // -> undefined\n **/\nHash.prototype.retrieve = function retrieve(key) {\n  var i = key_idx(this, key);\n  return (0 <= i) ? this.__hash_vals__[i] : this.__default_value__(this, key);\n};\n\n\n/** alias of: Hash#retrieve\n *  Hash#get(key, val) -> Void\n **/\nHash.prototype.get = Hash.prototype.retrieve;\n\n\n/**\n *  Hash#isEmpty() -> Boolean\n *\n *  Returns boolean `TRUE` whenever hash has no elements.\n *\n *  ##### Example\n *\n *      var key = {};\n *\n *      hash.isEmpty();\n *      // -> true\n *\n *      hash.store(key, 'abc');\n *      hash.isEmpty();\n *      // -> false\n *\n *      hash.remove(key);\n *      hash.isEmpty();\n *      // -> true\n **/\nHash.prototype.isEmpty = function isEmpty() {\n  return 0 === this.__count__;\n};\n\n\n/**\n *  Hash#count -> Number\n *\n *  Returns amount of hash elements.\n *\n *  ##### Example\n *\n *      var key = {};\n *\n *      hash.count\n *      // -> 0\n *\n *      hash.store(key, 'abc');\n *      hash.count\n *      // -> 1\n *\n *      hash.remove(key);\n *      hash.count\n *      // -> 0\n **/\nHash.prototype.__defineGetter__('count', function count() {\n  return this.__count__;\n});\n\n\n/**\n *  Hash#keys -> Array\n *\n *  Returns an array all keys presented in the hash\n **/\nHash.prototype.__defineGetter__('keys', function keys() {\n  return this.__hash_keys__.slice();\n});\n\n\n/**\n *  Hash#clone() -> Hash\n *\n *  Returns copy of the hash.\n **/\nHash.prototype.clone = function () {\n  var copy = new Hash(this.__default_value__);\n\n  this.__hash_keys__.forEach(function (k) {\n    if (this.hasKey(k)) {\n      copy.set(k, this.get(k));\n    }\n  }, this);\n\n  return copy;\n};\n\n\n/** alias: Hash.new\n *  Hash.create() -> SortedSet\n *\n *  Constructor proxy.\n **/\nHash.create = function create(defaultValue) {\n  return new Hash(defaultValue);\n};\n", "/**\n *  class Set\n *\n *  Provides Array that contains only unique elements.\n *\n *  ##### Example\n *\n *      var set = new Set();\n *\n *      set.push('Hello').push('World!').push('Hello');\n *      set.join(' ');\n *      // -> Hello World!\n **/\n\n\n'use strict';\n\n\n/**\n *  new Set(arr)\n *  - arr (Array): Initial array to fill-in\n *\n *  Creates new instance of Set.\n *\n *      var s = new Set([1, 2, 1, 3]);\n *      s.toArray();\n *      // -> [1, 2, 3]\n **/\nfunction Set(arr) {\n  Object.defineProperty(this, '__arr__', {value: []});\n\n  if (arr) {\n    arr.forEach(function (el) { this.push(el); }, this);\n  }\n}\n\n\n/**\n *  Set#unshift(val) -> Void\n *  - val (Mixed)\n *\n *  Prepends `val` to the head of the set.\n *  See native `Array#unshift` function for details.\n **/\nSet.prototype.unshift = function (val) {\n  if (-1 === this.__arr__.indexOf(val)) {\n    this.__arr__.unshift(val);\n  }\n};\n\n\n/**\n *  Set#push(val) -> Void\n *  - val (Mixed)\n *\n *  Appends `val` to the tail of the set.\n *  See native `Array#push` function for details.\n **/\nSet.prototype.push = function (val) {\n  if (-1 === this.__arr__.indexOf(val)) {\n    this.__arr__.push(val);\n  }\n};\n\n\n/**\n *  Set#forEach(iterator[, thisArg]) -> Void\n *  - iterator (Function)\n *  - thisArg (Object)\n *\n *  Proxy to `forEach` of internal array.\n *  See native `Array#forEach` function for details.\n **/\n\n\n/**\n *  Set#slice(begin[, end]) -> Void\n *\n *  Returns a one-level deep copy of a portion of a set.\n *  See native `Array#slice` function for details.\n **/\n\n\n/**\n *  Set#join(separator) -> Void\n *\n *  Joins all elements of a set into a string.\n *  See native `Array#join` function for details.\n **/\n\n\n/**\n *  Set#shift() -> Mixed\n *\n *  Removes the first element from a set and returns that element.\n *  See native `Array#shift` function for details.\n **/\n\n\n/**\n *  Set#pop() -> Mixed\n *\n *  Removes the last element from a set and returns that element.\n *  See native `Array#pop` function for details.\n **/\n\n\n['forEach', 'slice', 'join', 'shift', 'pop'].forEach(function (name) {\n  Set.prototype[name] = function () {\n    return this.__arr__[name].apply(this.__arr__, arguments);\n  };\n});\n\n\n/**\n *  Set#length -> Numeric\n *\n *  Reflects the number of elements in a set.\n **/\nObject.defineProperty(Set.prototype, 'length', {\n  get: function () { return this.__arr__.length; }\n});\n\n\n/**\n *  Set#toArray() -> Array\n *\n *  Syntax sugar. Same as calling `set.slice()`.\n **/\nSet.prototype.toArray = function () {\n  return this.slice();\n};\n\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nmodule.exports = Set;\n", "/**\n *  class SortedList\n *\n *  Provides easy way to build sequences of objects (or functions) based on\n *  priority weight.\n *\n *  ##### Example\n *\n *      var set = new SortedList();\n *\n *      set.add(20, 'World!').add(10, 'Hello');\n *      set.sorted.join(' ');\n *      // -> Hello World!\n *\n *      set.add(10, ', Cruel');\n *      set.sorted.join(' ');\n *      // -> Hello, Cruel World!\n **/\n\n\n'use strict';\n\n\n// callback for Array#sort to sort numbers adequately :))\nfunction sort_nums_asc(a, b) {\n  return a - b;\n}\n\n\n// returns sequence array for given weight\nfunction get_sequence(self, weight) {\n  if (undefined === self.__sequences__[weight]) {\n    self.__sequences__[weight] = [];\n  }\n\n  return self.__sequences__[weight];\n}\n\n\n/**\n *  new SortedList()\n **/\nvar SortedList = module.exports = function SortedList() {\n  this.__sequences__ = {};\n  this.__sorted__ = null;\n};\n\n\n/** chainable\n *  SortedList#add(weight, val) -> SortedList\n *  - weight (Number): Weight of value\n *  - val (Mixed): Any value\n *\n *  Appends `val` into the set with given `weight`.\n **/\nSortedList.prototype.add = function add(weight, val) {\n  this.__sorted__ = null;\n  get_sequence(this, +weight).push(val);\n  return this;\n};\n\n\n/**\n *  SortedList#sorted -> Array\n *\n *  Returns array of all values sorted according to their weights\n *\n *  ##### Example\n *\n *      set.add(20, 'b').add(30, 'c').add(10, 'a');\n *      set.flatten().join('');\n *      // -> abc\n **/\nSortedList.prototype.__defineGetter__('sorted', function sorted() {\n  var arr = [], self = this;\n\n  if (null !== this.__sorted__) {\n    return this.__sorted__;\n  }\n\n  function iterator(weight) {\n    get_sequence(self, weight).forEach(function (val) {\n      arr.push(val);\n    });\n  }\n\n  Object.getOwnPropertyNames(this.__sequences__)\n    .sort(sort_nums_asc)\n    .forEach(iterator);\n\n  this.__sorted__ = arr;\n  return arr;\n});\n\n\n/**\n *  SortedList#concat(other) -> SortedList\n *\n *  Returns new SortedList containing elements from both original and other\n *  lists.\n **/\nSortedList.prototype.concat = function concat(other) {\n  var result = SortedList.create(), store = result.__sequences__;\n\n  [this, other].forEach(function (set) {\n    Object.getOwnPropertyNames(set.__sequences__).forEach(function (prio) {\n      store[prio] = (store[prio] || []).concat(set.__sequences__[prio]);\n    });\n  });\n\n  return result;\n};\n\n\n/** alias: SortedList.new\n *  SortedList.create() -> SortedList\n *\n *  Constructor proxy.\n **/\nSortedList.create = function create() {\n  return new SortedList();\n};\n", "'use strict';\n\n\nmodule.exports = {\n  Hash:         require('./types/hash.js'),\n  Set:          require('./types/set.js'),\n  SortedList:   require('./types/sorted_list.js')\n};\n", "module.exports = require('./lib/types');\n"],
  "mappings": "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",
  "names": ["Hash", "SortedList", "require_types"]
}
