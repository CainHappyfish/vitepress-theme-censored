import{_ as s,p as n,l as a,P as p}from"./chunks/framework.DLat4R4U.js";const h=JSON.parse('{"title":"VitePress主题制作指北","description":"","frontmatter":{"layout":"page","title":"VitePress主题制作指北","date":"2024-7-1","cover":"https://pic.imgdb.cn/item/667c343ed9c307b7e91885d2.png","excerpt":"VitePress主题制作指北","tags":["Vitepress","主题制作"]},"headers":[],"relativePath":"posts/VitePress主题制作指北.md","filePath":"posts/VitePress主题制作指北.md"}'),e={name:"posts/VitePress主题制作指北.md"},l=p(`<h1 id="vitepress主题制作指北" tabindex="-1">VitePress主题制作指北 <a class="header-anchor" href="#vitepress主题制作指北" aria-label="Permalink to &quot;VitePress主题制作指北&quot;">​</a></h1><p><s>安装以及基本使用看官网</s></p><p>参考：</p><p>vitepress官方默认主题</p><p><a href="https://github.com/MaLuns/vitepress-theme-async" target="_blank" rel="noreferrer">MaLuns/vitepress-theme-async</a></p><p><a href="https://github.com/ATQQ/sugar-blog" target="_blank" rel="noreferrer">ATQQ/sugar-blog</a></p><p><a href="https://volantis.js.org/" target="_blank" rel="noreferrer">Volantis</a></p><h2 id="默认主题" tabindex="-1">默认主题 <a class="header-anchor" href="#默认主题" aria-label="Permalink to &quot;默认主题&quot;">​</a></h2><p><code class="inline-code">theme-default</code>默认主题的结构如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>├─components		# 放组件的</span></span>
<span class="line"><span>│  └─icons</span></span>
<span class="line"><span>├─composables		# 放可复用的js/ts逻辑模块</span></span>
<span class="line"><span>├─fonts				# 字体文件</span></span>
<span class="line"><span>├─styles			# 放样式表的</span></span>
<span class="line"><span>│  └─components</span></span>
<span class="line"><span>└─support			# 放外部引用文件的</span></span></code></pre></div><p>一些重要文件：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>index.ts 	# 该文件中的参数可以在 VitePress 主题和 Markdown 文件中被引用和调用</span></span>
<span class="line"><span>index.d.ts	# TypeScript 声明文件</span></span>
<span class="line"><span>config.mts	# 定义和配置站点的各种设置</span></span>
<span class="line"><span>theme.d.ts	# 主题接口配置</span></span></code></pre></div><p>这俩文件中定义 VitePress 的配置对象和主题配置对象的类型，以及如何导出一个定义配置的方法。这些声明可以帮助 TypeScript 理解 VitePress 的配置结构，并在开发过程中提供类型检查和代码补全。</p><div class="list-container"><ul><li><p><code class="inline-code">index.ts</code>：站点配置</p><p><a href="https://vitepress.dev/guide/custom-theme" target="_blank" rel="noreferrer">Using a Custom Theme | VitePress</a></p></li><li><p><code class="inline-code">index.d.ts</code>：定义 VitePress 中使用的各种类型，包括配置对象、主题配置、插件接口等</p></li><li><p><code class="inline-code">config.mts</code>： 文件用于定义和配置站点的各种设置，确保站点的基本信息、主题、插件和 Markdown 解析器的行为能够按照需求进行定制。</p><p><a href="https://vitepress.dev/reference/site-config" target="_blank" rel="noreferrer">Site Config | VitePress</a></p></li></ul></div><h2 id="初始化主题" tabindex="-1">初始化主题 <a class="header-anchor" href="#初始化主题" aria-label="Permalink to &quot;初始化主题&quot;">​</a></h2><p>我们根据默认主题结构以及async的结构创建我们的主题项目（部分展示）：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>├─docs</span></span>
<span class="line"><span>└─packages</span></span>
<span class="line"><span>    ├─create-theme				# 用于创建、打包主题</span></span>
<span class="line"><span>    │  ├─public</span></span>
<span class="line"><span>    │  │  ├─move				# 版本信息</span></span>
<span class="line"><span>    │  │  ├─posts				# 博客文章</span></span>
<span class="line"><span>    │  │  └─template			# 主题模板</span></span>
<span class="line"><span>    │  └─src					# nodejs安装脚本</span></span>
<span class="line"><span>    └─vitepress-theme-censored	# 主题主文件</span></span>
<span class="line"><span>        ├─assets				# 图片等资源</span></span>
<span class="line"><span>        ├─components</span></span>
<span class="line"><span>        ├─composables</span></span>
<span class="line"><span>        ├─config				# 主题配置文件</span></span>
<span class="line"><span>        ├─layouts</span></span>
<span class="line"><span>        ├─plugins</span></span>
<span class="line"><span>        ├─styles</span></span>
<span class="line"><span>        ├─types					# 配置对象、主题配置、插件接口</span></span>
<span class="line"><span>        └─utils					# 工具函数等</span></span></code></pre></div><p>使用<code class="inline-code">create-theme的原因</code>（个人看法）：</p><div class="list-container"><ul><li><p>方便发布</p></li><li><p>方便进行主题配置</p><p>如果使用自定义主题并希望对主题配置进行类型检查，则需要改用 <code class="inline-code">defineConfigWithTheme</code>，并通过通用参数传递自定义主题的配置类型：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>import { defineConfigWithTheme } from &#39;vitepress&#39;</span></span>
<span class="line"><span>import type { ThemeConfig } from &#39;your-theme&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default defineConfigWithTheme&lt;ThemeConfig&gt;({</span></span>
<span class="line"><span>  themeConfig: {</span></span>
<span class="line"><span>    // 类型为 \`ThemeConfig\`</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>})</span></span></code></pre></div><p>这里有一种做法是在我们自己的主题里设置：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>export const defaultConfig = {}</span></span></code></pre></div><p>这样就不用像官方文档（上面那些代码）这样写了，可以按默认主题的方式写配置：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>import { defineConfig } from &#39;vitepress-theme-censored/config&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default defineConfig({</span></span>
<span class="line"><span>  title: &quot;BLOG THEME CENSORED&quot;,</span></span>
<span class="line"><span>  description: &quot;A theme for Vitepress&quot;</span></span>
<span class="line"><span>})</span></span></code></pre></div></li></ul></div><h3 id="项目配置" tabindex="-1">项目配置 <a class="header-anchor" href="#项目配置" aria-label="Permalink to &quot;项目配置&quot;">​</a></h3><p>首先我们先进入<code class="inline-code">vitepress-theme-censored</code>中配置<code class="inline-code">package.json</code>，以便在<code class="inline-code">create-theme</code>中导入。</p><p>使用命令</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>npm init -y  # 跳过输入配置信息直接生成文件</span></span></code></pre></div><p>在生成的<code class="inline-code">package.json</code>中写入你想要的配置信息，以下是我的配置：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;vitepress-theme-censored&quot;,</span></span>
<span class="line"><span>  &quot;version&quot;: &quot;1.0.0&quot;,</span></span>
<span class="line"><span>  &quot;repository&quot;: &quot;git@github.com:Cainhappyfish/vitepress-theme-censored.git&quot;,</span></span>
<span class="line"><span>  &quot;description&quot;: &quot;&quot;,</span></span>
<span class="line"><span>  &quot;author&quot;: &quot;破酥 C4iN&quot;,</span></span>
<span class="line"><span>  &quot;main&quot;: &quot;index.ts&quot;,				// main: 包的主入口文件</span></span>
<span class="line"><span>  &quot;type&quot;: &quot;module&quot;,				 	// 包的类型，module 表示使用 ES 模块</span></span>
<span class="line"><span>  &quot;types&quot;: &quot;./types/index.d.ts&quot;,</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  /* 	</span></span>
<span class="line"><span>	定义了包的导出配置，可以通过不同的路径导入包的不同部分</span></span>
<span class="line"><span>    . 表示包的根路径，导出 ./index.ts 作为默认导出，同时提供类型定义文件。</span></span>
<span class="line"><span>    ./config 表示可以通过 vitepress-theme-censored/config 导入 ./config/index.js 文件。</span></span>
<span class="line"><span>  */    </span></span>
<span class="line"><span>  &quot;exports&quot;: {						</span></span>
<span class="line"><span>      &quot;.&quot;: {</span></span>
<span class="line"><span>          &quot;default&quot;: &quot;./index.ts&quot;,</span></span>
<span class="line"><span>          &quot;types&quot;: &quot;./types/index.d.ts&quot;</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      &quot;./config&quot;: {</span></span>
<span class="line"><span>          &quot;default&quot;: &quot;./config/index.js&quot;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  &quot;scripts&quot;: {</span></span>
<span class="line"><span>    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  &quot;keywords&quot;: [</span></span>
<span class="line"><span>    &quot;vitepress-theme&quot;,</span></span>
<span class="line"><span>    &quot;blog-theme&quot;</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  &quot;license&quot;: &quot;ISC&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>然后进入create-theme中，安装</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>npm install &lt;你的主题路径&gt;</span></span></code></pre></div><p>用<code class="inline-code">npm list</code>检查，成功：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>+-- vitepress-theme-censored@1.0.0 -&gt; .\\packages\\vitepress-theme-censored</span></span></code></pre></div><blockquote><p>这里不知道为什么config里面只用js不能用ts</p></blockquote><p>然后在<code class="inline-code">config/index.js</code>写入测试配置信息</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>export const defaultConfig = {</span></span>
<span class="line"><span>  // some default configuration</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export const defineConfig = (config) =&gt; {</span></span>
<span class="line"><span>// 这段代码的意思是创建一个新对象，该对象首先包含 defaultConfig 中的所有属性，然后包含 config 中的所有属性。如果 config 中的属性与 defaultConfig 中的属性重名，则 config 中的属性会覆盖 defaultConfig 中的同名属性。</span></span>
<span class="line"><span>  return {</span></span>
<span class="line"><span>    ...defaultConfig,</span></span>
<span class="line"><span>    ...config</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span>};</span></span></code></pre></div><p>还有<code class="inline-code">packages/create-theme/public/template/.vitepress/config.mts</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>import { defineConfig } from &#39;vitepress-theme-censored/config&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default defineConfig({</span></span>
<span class="line"><span>  title: &quot;BLOG THEME CENSORED&quot;,</span></span>
<span class="line"><span>  description: &quot;A theme for Vitepress&quot;</span></span>
<span class="line"><span>})</span></span></code></pre></div><p>以及<code class="inline-code">packages/vitepress-theme-censored/index.ts</code>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>import Layout from &#39;./layouts/Layout.vue&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>  Layout,</span></span>
<span class="line"><span>  enhanceApp({ app, router, siteData }) {</span></span>
<span class="line"><span>    // ...</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><code class="inline-code">packages/vitepress-theme-censored/layouts/Layout.vue</code>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>&lt;script setup&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/script&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;template&gt;</span></span>
<span class="line"><span>&lt;h1&gt; Test &lt;/h1&gt;</span></span>
<span class="line"><span>&lt;/template&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;style scoped&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/style&gt;</span></span></code></pre></div><p>在<code class="inline-code">packages/create-theme/public/template</code>运行<code class="inline-code">npm run dev</code>。</p><h3 id="参数传递" tabindex="-1">参数传递 <a class="header-anchor" href="#参数传递" aria-label="Permalink to &quot;参数传递&quot;">​</a></h3><p>要在主题中动态传递内容参数，我们需要配置<code class="inline-code">types/index.d.ts</code>，<code class="inline-code">types/theme.d.ts</code>文件，并在<code class="inline-code">packages/create-theme/public/template/.vitepress/config.mts</code>写入我们想要的内容，这里我参考了<code class="inline-code">async</code>主题的配置：</p><div class="list-container"><ul><li><p><code class="inline-code">theme.d.ts</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>// 是否启用了 Algolia 搜索</span></span>
<span class="line"><span>declare const __ALGOLIA__: boolean</span></span>
<span class="line"><span>// 检查是否启用了本地搜索</span></span>
<span class="line"><span>declare const __VP_LOCAL_SEARCH__: boolean</span></span>
<span class="line"><span>// 键为字符串类型、值为任意类型的对象</span></span>
<span class="line"><span>declare type AnyObject = Record&lt;string, any&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 基本组件</span></span>
<span class="line"><span>declare namespace CensoredTheme {</span></span>
<span class="line"><span>    // 排序参数的类型，可以是字符串或一个键为字符串/数字、值为1或-1的对象</span></span>
<span class="line"><span>    type OrderByArg = string | Record&lt;string | number, 1 | -1&gt;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /** 文章基础信息 */</span></span>
<span class="line"><span>	interface PostData {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 导航栏链接 */</span></span>
<span class="line"><span>	interface NavItemWithLink {}</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span>	// 带子菜单的nav</span></span>
<span class="line"><span>	interface NavItemWithChildren {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 友情链接 */</span></span>
<span class="line"><span>	interface Links {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 文章目录 */</span></span>
<span class="line"><span>	interface MenuItem {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 语言文件 */</span></span>
<span class="line"><span>	interface Language {}</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>declare namespace CensoredTheme {</span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 网站图标配置 || Configure the icon information of the blog</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	interface FaviconConfig {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 用户配置 || User config</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	interface UserConfig {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 顶部导航栏 || Layout top bars</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	type TobBarsConfig = Array&lt;CensoredTheme.NavItemWithLink | CensoredTheme.NavItemWithChildren&gt;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 横幅配置 || Layout banner config</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	interface BannerConfig {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 侧栏配置 || Layout sidebar config</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	interface SidebarConfig {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 页脚配置 || Layout footer config</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	interface FooterConfig {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 关于页 || About page config</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	interface AboutPageConfig {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 友情链接列表 || Links config</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	type LinksConfig = Links[];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 文章封面图 || Post cover image</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	interface ConverConfig {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 页面分页配置 || [index | archives | categorys | tags] page sort paging config</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	interface PaginationConfig {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 内置页面跳转地址 || built in page path config</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	interface BuiltPageConfig {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 固定按钮显示配置 || Fixed button config on the right</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	interface FixedBtnConfig {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 文章上下页 || the upper and lower pages of the article</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	interface PostPaginationConfig {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 打赏配置 || Reward config</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	interface RewardConfig {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 文章版权信息 || Creative commons config</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	interface CreativeCommonsConfig {}</span></span>
<span class="line"><span>	/**</span></span>
<span class="line"><span>	 * 过期提取 || notice outdate</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	interface NoticeOutdateConfig {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>declare module &#39;vitepress-theme-censored/config&#39; {</span></span>
<span class="line"><span>	// 从 &#39;vitepress-theme-censored&#39; 模块导入 CensoredThemeConfig 类型</span></span>
<span class="line"><span>	import { CensoredThemeConfig } from &#39;vitepress-theme-censored&#39;;</span></span>
<span class="line"><span>	// 从 &#39;vitepress&#39; 模块导入 UserConfig 类型</span></span>
<span class="line"><span>	import { UserConfig } from &#39;vitepress&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// 导出 defineConfig 函数，该函数接受一个配置对象并返回相同类型的配置对象</span></span>
<span class="line"><span>	export const defineConfig: (config: UserConfig&lt;CensoredThemeConfig&gt;) =&gt; UserConfig&lt;CensoredThemeConfig&gt;;</span></span>
<span class="line"><span>	// 导出 defaultConfig 常量，类型为 CensoredThemeConfig</span></span>
<span class="line"><span>	export const defaultConfig: CensoredThemeConfig;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>declare module &#39;@localSearchIndex&#39; {</span></span>
<span class="line"><span>	// 导出 data 常量，类型为一个对象，其中键为字符串，值为返回 Promise&lt;{ default: string }&gt; 的函数</span></span>
<span class="line"><span>	const data: Record&lt;string, () =&gt; Promise&lt;{ default: string }&gt;&gt;;</span></span>
<span class="line"><span>	export default data;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 声明 DeepKeys 类型，用于获取对象的所有深层键</span></span>
<span class="line"><span>declare type DeepKeys&lt;T&gt; = T extends object</span></span>
<span class="line"><span>	? {</span></span>
<span class="line"><span>			[K in keyof T]-?: K extends string ? (T[K] extends object ? \`\${K}.\${DeepKeys&lt;T[K]&gt;}\` : \`\${K}\`) : never;</span></span>
<span class="line"><span>	  }[keyof T]</span></span>
<span class="line"><span>	: never;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 声明 DiffDateSuffix 类型，表示日期时间差的后缀</span></span>
<span class="line"><span>declare type DiffDateSuffix = {</span></span>
<span class="line"><span>	month: string;</span></span>
<span class="line"><span>	day: string;</span></span>
<span class="line"><span>	hour: string;</span></span>
<span class="line"><span>	min: string;</span></span>
<span class="line"><span>	just: string;</span></span>
<span class="line"><span>};</span></span></code></pre></div><blockquote><p>以下是对代码 <code class="inline-code">const data: Record&lt;string, () =&gt; Promise&lt;{ default: string }&gt;&gt;;</code> 的详细解释：</p><h3 id="record-string-promise-default-string-的含义" tabindex="-1"><code class="inline-code">Record&lt;string, () =&gt; Promise&lt;{ default: string }&gt;&gt;</code> 的含义 <a class="header-anchor" href="#record-string-promise-default-string-的含义" aria-label="Permalink to &quot;\`Record&lt;string, () =&gt; Promise&lt;{ default: string }&gt;&gt;\` 的含义&quot;">​</a></h3><p><code class="inline-code">Record&lt;string, () =&gt; Promise&lt;{ default: string }&gt;&gt;</code> 是 TypeScript 中的一种类型声明。它定义了一个对象类型，其中：</p><div class="list-container"><ul><li><strong><code class="inline-code">Record&lt;K, T&gt;</code></strong>：这是 TypeScript 提供的一个工具类型（utility type），用于构建一个对象类型，其键的类型为 <code class="inline-code">K</code>，值的类型为 <code class="inline-code">T</code>。<div class="list-container"><ul><li><code class="inline-code">K</code> 代表键的类型，在这个例子中是 <code class="inline-code">string</code>，意味着键是字符串类型。</li><li><code class="inline-code">T</code> 代表值的类型，在这个例子中是 <code class="inline-code">() =&gt; Promise&lt;{ default: string }&gt;</code>，意味着值是一个返回 <code class="inline-code">Promise&lt;{ default: string }&gt;</code> 的函数。</li></ul></div></li></ul></div><h3 id="逐部分解释" tabindex="-1">逐部分解释 <a class="header-anchor" href="#逐部分解释" aria-label="Permalink to &quot;逐部分解释&quot;">​</a></h3><div class="list-container"><ol><li><p><strong><code class="inline-code">Record&lt;string, T&gt;</code></strong>：这个部分声明了一个对象，其中键是字符串类型。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span style="color:#D8DEE9;">Record</span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9;">string</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> T</span><span style="color:#81A1C1;">&gt;</span></span></code></pre></div><p>相当于：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#D8DEE9;">key</span><span style="color:#D8DEE9FF;">: </span><span style="color:#D8DEE9;">string</span><span style="color:#D8DEE9FF;">]: </span><span style="color:#D8DEE9;">T</span><span style="color:#ECEFF4;"> }</span></span></code></pre></div></li><li><p><strong><code class="inline-code">() =&gt; Promise&lt;{ default: string }&gt;</code></strong>：这个部分声明了值的类型是一个函数，该函数返回一个 <code class="inline-code">Promise</code> 对象，而 <code class="inline-code">Promise</code> 对象最终会解析为一个包含 <code class="inline-code">default</code> 属性的对象，该属性的值是字符串类型。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#81A1C1;">&lt;</span><span style="color:#ECEFF4;">{</span><span style="color:#81A1C1;"> default</span><span style="color:#D8DEE9FF;">: </span><span style="color:#D8DEE9;">string</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">&gt;</span></span></code></pre></div><p>这是一个函数类型声明，函数没有参数（空参数列表），返回值是一个 <code class="inline-code">Promise</code> 对象。</p></li><li><p><strong>组合在一起</strong>：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span style="color:#D8DEE9;">Record</span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9;">string</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#81A1C1;">&lt;</span><span style="color:#ECEFF4;">{</span><span style="color:#81A1C1;"> default</span><span style="color:#D8DEE9FF;">: </span><span style="color:#D8DEE9;">string</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">&gt;&gt;</span></span></code></pre></div><p>这个组合声明了一个对象类型，这个对象的每个键都是字符串类型，每个值都是一个返回 <code class="inline-code">Promise&lt;{ default: string }&gt;</code> 的函数。</p></li></ol></div></blockquote></li><li><p><code class="inline-code">index.d.ts</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>import { DefaultTheme } from &#39;vitepress&#39;;</span></span>
<span class="line"><span>export declare interface CensoredThemeConfig {</span></span>
<span class="line"><span>/** 页面切换动画 | page transition animations */</span></span>
<span class="line"><span>	pageLoading?: boolean;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 主题切换动画 | theme transition animations */</span></span>
<span class="line"><span>	themeLoading?: boolean;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 自定义文章样式 */</span></span>
<span class="line"><span>	customMdStyle?: boolean;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 将主题组件注册到全局 | register the global component */</span></span>
<span class="line"><span>	globalComponents?: boolean | Array&lt;string&gt;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 作者 | author */</span></span>
<span class="line"><span>	author?: string;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 搜索 | search */</span></span>
<span class="line"><span>	search?: { provider: &#39;local&#39;; options?: DefaultTheme.LocalSearchOptions };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 时区 | timeZone*/</span></span>
<span class="line"><span>	timeZone?: number;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 文章目录 | post folder */</span></span>
<span class="line"><span>	postDir?: string;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 内置页地址配置 | built in page path config */</span></span>
<span class="line"><span>	page?: CensoredTheme.BuiltPageConfig;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 首页分页 | Index page generator */</span></span>
<span class="line"><span>	indexGenerator?: Omit&lt;CensoredTheme.PaginationConfig, &#39;date_fmt&#39;&gt;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 归档页 | Archive generator */</span></span>
<span class="line"><span>	archiveGenerator?: CensoredTheme.PaginationConfig;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 上下页 | Post pagination */</span></span>
<span class="line"><span>	postPagination?: CensoredTheme.PostPaginationConfig;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 导航栏 | Layout top bars */</span></span>
<span class="line"><span>	navBars?: CensoredTheme.TobBarsConfig;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 用户信息 | User info */</span></span>
<span class="line"><span>	user?: CensoredTheme.UserConfig;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 站点图标 | Configure the icon information of the site */</span></span>
<span class="line"><span>	favicon?: CensoredTheme.FaviconConfig;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 横幅 | Banner config */</span></span>
<span class="line"><span>	banner?: CensoredTheme.BannerConfig;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 侧栏 | Sidebar config */</span></span>
<span class="line"><span>	sidebar?: CensoredTheme.SidebarConfig;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 页脚 | Footer config */</span></span>
<span class="line"><span>	footer?: CensoredTheme.FooterConfig;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 自定义封面 | Customize the cover image */</span></span>
<span class="line"><span>	cover?: CensoredTheme.ConverConfig;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 固定按钮 | Fixed button */</span></span>
<span class="line"><span>	rightside?: CensoredTheme.FixedBtnConfig;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 关于页 | About page Config */</span></span>
<span class="line"><span>	about?: CensoredTheme.AboutPageConfig;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 友情链接 | Links */</span></span>
<span class="line"><span>	links?: CensoredTheme.LinksConfig;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 打赏 | Reward */</span></span>
<span class="line"><span>	reward?: CensoredTheme.RewardConfig;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 目录 | outline */</span></span>
<span class="line"><span>	outline?: DefaultTheme.Outline;</span></span>
<span class="line"><span>	outlineTitle?: string;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	/** 语言 | i18n */</span></span>
<span class="line"><span>	languages?: Record&lt;string, CensoredTheme.Language&gt;;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import Theme, { defineTheme } from &#39;../index&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import &#39;./theme.d.ts&#39;;</span></span>
<span class="line"><span>export default Theme;</span></span>
<span class="line"><span>export { defineTheme };</span></span></code></pre></div></li></ul></div><p>配置完成后，在<code class="inline-code">config.mts</code>写入你的主题信息，然后就可以开始写组件了。以下是项目目前的样子：</p><h2 id="主题部署" tabindex="-1">主题部署 <a class="header-anchor" href="#主题部署" aria-label="Permalink to &quot;主题部署&quot;">​</a></h2><blockquote><p>非根目录部署</p><p><s>妈的，跟你爆了</s></p></blockquote><p>比如我是在GitHub Page上配的，<s>本来的博客因为刷机刷没了</s>，不是在根目录下搭建。我们需要在<code class="inline-code">create-theme</code>的<code class="inline-code">config.mts</code>中加入</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki nord censored-code" tabindex="0"><code><span class="line"><span>base: &#39;/vitepress-theme-censored/&#39;,</span></span></code></pre></div><p>由于非根目录部署的存在，我们需要在用到url的地方使用<code class="inline-code">withBase()</code>将配置的 <a href="https://vitepress.dev/zh/reference/site-config#base" target="_blank" rel="noreferrer"><code class="inline-code">base</code></a> 追加到给定的 URL 路径。另请参阅 <a href="https://vitepress.dev/zh/guide/asset-handling#base-url" target="_blank" rel="noreferrer">Base URL</a>。</p><h2 id="如何进行页面跳转" tabindex="-1">如何进行页面跳转？ <a class="header-anchor" href="#如何进行页面跳转" aria-label="Permalink to &quot;如何进行页面跳转？&quot;">​</a></h2><p>比如我们点击<code class="inline-code">About</code>要导航到<code class="inline-code">/about</code>界面，然后就出现了这种很抽象的场面，浏览器给我们的提示是正确的url，但是实际它却跳转到了html文件</p><p><div class="img-container"><img src="https://pic.imgdb.cn/item/667a8ec5d9c307b7e97d3d56.png" alt=""></div></p><p>初步猜测是因为vitepress优先解析md文件成html，把原来的url覆盖了。</p><p>哈哈，最后发现只要加上<code class="inline-code">cleanUrls: true</code>属性就可以了。</p><p><code class="inline-code">Vitepress</code>内置了<code class="inline-code">vue-router</code>，你也可以用<code class="inline-code">slot</code>插槽来实现页面跳转。</p>`,54),i=[l];function c(o,t,r,d,g,u){return a(),n("div",null,i)}const m=s(e,[["render",c]]);export{h as __pageData,m as default};
